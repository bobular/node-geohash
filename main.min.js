var BASE32_CODES = "0123456789bcdefghjkmnpqrstuvwxyz";
var BASE32_CODES_DICT = {};
for (var i = 0; i < BASE32_CODES.length; i++) {
    BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i
}
var ENCODE_AUTO = "auto";
var SIGFIG_HASH_LENGTH = [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18];
var encode = function (j, a, n) {
    if (n === ENCODE_AUTO) {
        if (typeof(j) === "number" || typeof(a) === "number") {
            throw new Error("string notation required for auto precision.")
        }
        var k = j.split(".")[1].length;
        var q = a.split(".")[1].length;
        var o = Math.max(k, q);
        n = SIGFIG_HASH_LENGTH[o]
    } else {
        if (n === undefined) {
            n = 9
        }
    }
    var g = [], p = 0, d = 0, f = 0, e = 90, c = -90, m = 180, h = -180, l;
    while (g.length < n) {
        if (d % 2 === 0) {
            l = (m + h) / 2;
            if (a > l) {
                f = (f << 1) + 1;
                h = l
            } else {
                f = (f << 1) + 0;
                m = l
            }
        } else {
            l = (e + c) / 2;
            if (j > l) {
                f = (f << 1) + 1;
                c = l
            } else {
                f = (f << 1) + 0;
                e = l
            }
        }
        p++;
        d++;
        if (p === 5) {
            var b = BASE32_CODES[f];
            g.push(b);
            p = 0;
            f = 0
        }
    }
    return g.join("")
};
var encode_int = function (g, a, c) {
    c = c || 52;
    var e = 0, f = 90, d = -90, k = 180, h = -180, j, b = 0;
    while (e < c) {
        b *= 2;
        if (e % 2 === 0) {
            j = (k + h) / 2;
            if (a > j) {
                b += 1;
                h = j
            } else {
                k = j
            }
        } else {
            j = (f + d) / 2;
            if (g > j) {
                b += 1;
                d = j
            } else {
                f = j
            }
        }
        e++
    }
    return b
};
var decode_bbox = function (j) {
    var o = true, e = 90, c = -90, k = 180, h = -180, m;
    var f = 0;
    for (var d = 0, b = j.length; d < b; d++) {
        var a = j[d].toLowerCase();
        f = BASE32_CODES_DICT[a];
        for (var n = 4; n >= 0; n--) {
            var g = (f >> n) & 1;
            if (o) {
                m = (k + h) / 2;
                if (g === 1) {
                    h = m
                } else {
                    k = m
                }
            } else {
                m = (e + c) / 2;
                if (g === 1) {
                    c = m
                } else {
                    e = m
                }
            }
            o = !o
        }
    }
    return [c, h, e, k]
};
var decode_bbox_int = function (h, a) {
    a = a || 52;
    var f = 90, d = -90, k = 180, j = -180;
    var c = 0, g = 0;
    var b = a / 2;
    for (var e = 0; e < b; e++) {
        g = get_bit(h, ((b - e) * 2) - 1);
        c = get_bit(h, ((b - e) * 2) - 2);
        if (c === 0) {
            f = (f + d) / 2
        } else {
            d = (f + d) / 2
        }
        if (g === 0) {
            k = (k + j) / 2
        } else {
            j = (k + j) / 2
        }
    }
    return [d, j, f, k]
};
function get_bit(b, a) {
    return (b / Math.pow(2, a)) & 1
}
var decode = function (b) {
    var f = decode_bbox(b);
    var c = (f[0] + f[2]) / 2;
    var e = (f[1] + f[3]) / 2;
    var d = f[2] - c;
    var a = f[3] - e;
    return {latitude: c, longitude: e, error: {latitude: d, longitude: a}}
};
var decode_int = function (b, c) {
    var g = decode_bbox_int(b, c);
    var d = (g[0] + g[2]) / 2;
    var f = (g[1] + g[3]) / 2;
    var e = g[2] - d;
    var a = g[3] - f;
    return {latitude: d, longitude: f, error: {latitude: e, longitude: a}}
};
var neighbor = function (d, e) {
    var a = decode(d);
    var b = a.latitude + e[0] * a.error.latitude * 2;
    var c = a.longitude + e[1] * a.error.longitude * 2;
    return encode(b, c, d.length)
};
var neighbor_int = function (b, e, d) {
    d = d || 52;
    var c = decode_int(b, d);
    var f = c.latitude + e[0] * c.error.latitude * 2;
    var a = c.longitude + e[1] * c.error.longitude * 2;
    return encode_int(f, a, d)
};
var neighbors = function (j) {
    var l = j.length;
    var e = decode(j);
    var h = e.latitude;
    var a = e.longitude;
    var k = e.error.latitude * 2;
    var b = e.error.longitude * 2;
    var d, g;
    var c = [f(1, 0), f(1, 1), f(0, 1), f(-1, 1), f(-1, 0), f(-1, -1), f(0, -1), f(1, -1)];

    function f(m, n) {
        d = h + m * k;
        g = a + n * b;
        return encode(d, g, l)
    }

    return c
};
var neighbors_int = function (a, c) {
    c = c || 52;
    var f = decode_int(a, c);
    var h = f.latitude;
    var b = f.longitude;
    var l = f.error.latitude * 2;
    var d = f.error.longitude * 2;
    var e, g;
    var k = [j(1, 0), j(1, 1), j(0, 1), j(-1, 1), j(-1, 0), j(-1, -1), j(0, -1), j(1, -1)];

    function j(m, n) {
        e = h + m * l;
        g = b + n * d;
        return encode_int(e, g, c)
    }

    return k
};
var bboxes = function (e, m, f, n, p) {
    p = p || 9;
    var o = encode(e, m, p);
    var q = encode(f, n, p);
    var h = decode(o);
    var g = h.error.latitude * 2;
    var r = h.error.longitude * 2;
    var c = decode_bbox(o);
    var d = decode_bbox(q);
    var k = Math.round((d[0] - c[0]) / g);
    var l = Math.round((d[1] - c[1]) / r);
    var b = [];
    for (var j = 0; j <= k; j++) {
        for (var a = 0; a <= l; a++) {
            b.push(neighbor(o, [j, a]))
        }
    }
    return b
};
var bboxes_int = function (f, n, g, o, b) {
    b = b || 52;
    var p = encode_int(f, n, b);
    var q = encode_int(g, o, b);
    var h = decode_int(p, b);
    var j = h.error.latitude * 2;
    var r = h.error.longitude * 2;
    var d = decode_bbox_int(p, b);
    var e = decode_bbox_int(q, b);
    var l = Math.round((e[0] - d[0]) / j);
    var m = Math.round((e[1] - d[1]) / r);
    var c = [];
    for (var k = 0; k <= l; k++) {
        for (var a = 0; a <= m; a++) {
            c.push(neighbor_int(p, [k, a], b))
        }
    }
    return c
};
var geohash = {
    ENCODE_AUTO: ENCODE_AUTO,
    encode: encode,
    encode_uint64: encode_int,
    encode_int: encode_int,
    decode: decode,
    decode_int: decode_int,
    decode_uint64: decode_int,
    decode_bbox: decode_bbox,
    decode_bbox_uint64: decode_bbox_int,
    decode_bbox_int: decode_bbox_int,
    neighbor: neighbor,
    neighbor_int: neighbor_int,
    neighbors: neighbors,
    neighbors_int: neighbors_int,
    bboxes: bboxes,
    bboxes_int: bboxes_int
};